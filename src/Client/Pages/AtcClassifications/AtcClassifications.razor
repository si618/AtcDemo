@page "/GrpcSqlite"
@using AtcDemo.Client.Data
@using AtcDemo.Shared
@using Microsoft.EntityFrameworkCore
@using QuickGrid
@inject DataSynchronizer DataSynchronizer
@implements IDisposable
<PageTitle>ATC classifications from SQLite</PageTitle>

<h4 class="mb-4">ATC classifications from SQLite</h4>

<p>Fetches records using gRPC in batches of 1,000, adding to local SQLite database on browser
    <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</a>.</p>

<p>[W.I.P] Writing to the SQLite database is not working at the moment.</p>

<SyncStatus />
<AtcDetails Record="selectedAtcClassification" OnHide="@(() => { selectedAtcClassification = null; })" />

@if (db is null)
{
<div class="toast" role="alert" aria-live="polite" aria-atomic="true" data-bs-delay="10000">
  <div role="alert" aria-live="assertive" aria-atomic="true">No SQLite database found?</div>
</div>}
else
{
    <div class="records-grid">
        <Grid Virtualize="true" Items="@GetFilteredAtcClassifications()" ItemKey="@(x => x.Code)" ItemSize="35">

            <TemplateColumn Title="Code" SortBy="@(items => items.SortByAscending(x => x.Code))" Class="col-code">
                <ChildContent>
                    @context.Level1AnatomicalMainGroup /
                    @context.Level2TherapeuticSubgroup /
                    @context.Level3PharmacologicalSubgroup /
                    @context.Level4ChemicalSubgroup /
                    @context.Level5ChemicalSubstance /
                </ChildContent>
                <ColumnOptions>
                    <p class="small">Level 1 Anatomical Main Group (@level1.Length)</p>
                    <select multiple class="w-64 bg-gray-100 border-grey-500 border my-4" @bind="level1" @onclick="@(() =>
                        {
                            level2 = Array.Empty<string>();
                            level3 = Array.Empty<string>();
                            level4 = Array.Empty<string>();
                            level5 = Array.Empty<string>();
                        })">
                        @foreach (var name in db.Classifications.Select(x => x.Level1AnatomicalMainGroup).Distinct())
                        {
                            <option>@name</option>
                        }
                    </select>
                    <p class="small">Level 2 Therapeutic Subgroup (@level2.Length)</p>
                    <select multiple class="w-64 bg-gray-100 border-grey-500 border my-4" @bind="level2" @onclick="@(() =>
                        {
                            level3 = Array.Empty<string>();
                            level4 = Array.Empty<string>();
                            level5 = Array.Empty<string>();
                        })">
                        @foreach (var name in db.Classifications.Select(x => x.Level2TherapeuticSubgroup).Distinct())
                        {
                            <option>@name</option>
                        }
                    </select>
                    <p class="small">Level 3 Pharmacological Subgroup (@level3.Length)</p>
                    <select multiple class="w-64 bg-gray-100 border-grey-500 border my-4" @bind="level3" @onclick="@(() =>
                        {
                            level4 = Array.Empty<string>();
                            level5 = Array.Empty<string>();
                        })">
                        @foreach (var name in db.Classifications.Select(x => x.Level3PharmacologicalSubgroup).Distinct())
                        {
                            <option>@name</option>
                        }
                    </select>
                    <p class="small">Level 4 Chemical Subgroup (@level4.Length)</p>
                    <select multiple class="w-64 bg-gray-100 border-grey-500 border my-4" @bind="level4" @onclick="@(() =>
                        {
                            level5 = Array.Empty<string>();
                        })">
                        @foreach (var name in db.Classifications.Select(x => x.Level4ChemicalSubgroup).Distinct())
                        {
                            <option>@name</option>
                        }
                    </select>
                    <p class="small">Level 5 Chemical Substance (@level5.Length)</p>
                    <select multiple class="w-64 bg-gray-100 border-grey-500 border my-4" @bind="level5">
                        @foreach (var name in db.Classifications.Select(x => x.Level5ChemicalSubstance).Distinct())
                        {
                            <option>@name</option>
                        }
                    </select>
                    <div><button class="bg-gray-200 px-5 py-1 mb-2" @onclick="@(() =>
                        {
                            level1 = Array.Empty<string>();
                            level2 = Array.Empty<string>();
                            level3 = Array.Empty<string>();
                            level4 = Array.Empty<string>();
                            level5 = Array.Empty<string>();
                        })">Reset</button></div>
                </ColumnOptions>
            </TemplateColumn>

            <PropertyColumn Title="Name" Property="@(x => x.Name)" Class="col-name"
                OnCellClicked="@((AtcClassification classification) => { selectedAtcClassification = classification; })">
                <ColumnOptions>
                    <input @bind="searchName" @bind:event="oninput" type="search" placeholder="Search..." />
                </ColumnOptions>
            </PropertyColumn>

        </Grid>
        <div class="status-bar">
            Showing @GetFilteredAtcClassifications()?.Count().ToString("N0") items
        </div>
    </div>
}

@code {
    AtcClientDbContext? db;
    AtcClassification? selectedAtcClassification;

    [Parameter] public string? SearchName { get; set; }

    string[] administrationRoute = Array.Empty<string>();
    string[] level1 = Array.Empty<string>();
    string[] level2 = Array.Empty<string>();
    string[] level3 = Array.Empty<string>();
    string[] level4 = Array.Empty<string>();
    string[] level5 = Array.Empty<string>();
    string searchName = string.Empty;
    int minDose = 0, maxDose = 10000;

    IQueryable<AtcClassification>? GetFilteredAtcClassifications()
    {
        if (db is null)
        {
            return null;
        }

        var result = db.Classifications.AsNoTracking().AsQueryable();
        if (!string.IsNullOrEmpty(searchName))
        {
            result = result.Where(x => EF.Functions.Like(x.Name, searchName.Replace("%", "\\%") + "%", "\\"));
        }
        if (level1.Any())
        {
            result = result.Where(x => level1.Contains(x.Level1AnatomicalMainGroup));
        }
        if (level2.Any())
        {
            result = result.Where(x => level2.Contains(x.Level2TherapeuticSubgroup));
        }
        if (level3.Any())
        {
            result = result.Where(x => level3.Contains(x.Level3PharmacologicalSubgroup));
        }
        if (level4.Any())
        {
            result = result.Where(x => level4.Contains(x.Level4ChemicalSubgroup));
        }
        if (level5.Any())
        {
            result = result.Where(x => level5.Contains(x.Level5ChemicalSubstance));
        }
        if (minDose > 0)
        {
            result = result.Where(x => x.Doses.Any(d => d.DefinedDailyDose >= minDose));
        }
        if (maxDose > 0)
        {
            result = result.Where(x => x.Doses.Any(d => d.DefinedDailyDose <= maxDose));
        }
        if (administrationRoute.Any())
        {
            result = result.Where(x => x.Doses.Any(d => administrationRoute.Contains(d.AdministrationRoute)));
        }

        return result;
    }

    protected override async Task OnInitializedAsync()
    {
        db = await DataSynchronizer.GetPreparedDbContextAsync();
        DataSynchronizer.OnUpdate += StateHasChanged;
    }

    protected override void OnParametersSet()
    {
        searchName = SearchName ?? string.Empty;
    }

    public void Dispose()
    {
        db?.Dispose();
        DataSynchronizer.OnUpdate -= StateHasChanged;
    }
}
